function write_csv_file(self)
% write dynaload structure to ASCII CSV file (Comma Separated Value)
% nc is a dynaload objet in memory load from xls file. for example:
%
% $Id: write_csv_file.m 252 2013-08-16 14:58:37Z jgrelet $

% open csv file
% ---------------
self.fid = fopen(self.Filename, 'wt');
if self.fid == -1
  error(['dynaload:write', 'Can''t open file: ' self.Filename ' in write mode'])
end

% get fileparts
% -------------
[~, name, ext] = fileparts(self.Filename);

% display more info about read file on console
% ---------------------------------------------
if self.Echo
  switch ext
    case '.csv'
      fprintf('\nWRITE_CSV_FILE\n'); 
    case '.txt'
      fprintf('\nWRITE_TXT_FILE\n'); 
  end
  tic;
  fprintf('...reading ''%s''\n', self.Filename);
end

% write comment header
% --------------------
fprintf( self.fid, '%% This file was automatically generated by dynaload class\n');
fprintf( self.fid, '%% Do NOT modify this file\n');
%fprintf( self.fid, '%%\n');

% write  information, loop over each dynamic properties
% -----------------------------------------------------
for k = self.meta
  
  % convert cell to char
  % --------------------
  dp = char(k);
  
  % write to file dynamic property name
  % -----------------------------------
  fprintf( self.fid, '%%\n$%s$\n', dp);
  
  % get the first struct in the hashtable
  % ------------------------------------_
  lk = keys(self, dp);
  s = self.(dp).(lk{1});
  
  % initialise str
  % --------------
  str = '#;'; str2 = '#;';
  
  % construct 2 header lines using the type of each menber of the structure s
  % #;key__;value;unlimited;#
  % #;char;integer;logical;#
  % --------------------------------------------------------------------------
  for m = fieldnames(s)'
    
    % don't write data__ on header file
    if strcmp(char(m), 'data__')
      continue
    end
    
    % construct line
    str = strcat(str, sprintf('%s;', char(m)));
    value = s.(char(m));
    
    if isa(value,'logical')
      str2 = strcat(str2, 'logical;');
    elseif isa(value,'char')
      str2 = strcat(str2, 'char;');
    elseif isa(value,'integer')
      str2 = strcat(str2, 'integer;');
    elseif isa(value,'single')
      str2 = strcat(str2, 'float;');
    elseif isa(value,'double')
      str2 = strcat(str2, 'double;');
    elseif iscell(value)
      str2 = strcat(str2, 'cell;');
    else
      error('dynaload:write', 'undefine %s value for member %s', ....
        char(value), m);
    end
  end
  str = strcat(str, '#'); str2 = strcat(str2, '#');
  fprintf( self.fid, '%s\n', str);  fprintf( self.fid, '%s\n', str2);
  
  % write data lines
  for nk = keys(self, dp)
    nkk = char(nk);
    s = self.(dp).(nkk);
    str = '#;';
    for m = fieldnames(s)'
      value = s.(char(m));
      if islogical(value)
        format = '%d';
      elseif iscell(value)
        format = '%s';
      elseif isa(value,'char')
        format = '%s';
        %    else isa(value,'uint8')
        %      format = '%u';
      elseif isa(value,'integer')
        format = '%d';
        % format %g is used for scientific format 1e36 and %8.8g to write 99999.999
      elseif isa(value,'single')
        format = '%8.8g';
      elseif isa(value,'double')
        format = '%8.8g';
      else
        error('dynaload:write', 'undefine %s value for member %s', ....
          char(value), m);
      end
      
      % don't write data__ value on file
      if ~strcmp(char(m), 'data__')
        if isempty(value)
          str = strcat(str, ';');
        else
          if iscell(value)
            % if iscell, write 'val', or 'val1','val2', etc....
            for c = value
              % if it is last cell, add ; separator
              if strcmp(c, value{size(value,2)})
                str = strcat(str, sprintf('''%s'';', char(c)));
              else
                % add comma separator
                str = strcat(str, sprintf('''%s'',', char(c)));
              end
            end
          else
            % use strtrim to remove blank (format %8.8g)
            % ------------------------------------------
            str = strcat(str, strtrim(sprintf(strcat(format, ';'), value)));
          end
        end
      end
    end
    str = strcat(str, '#');
    fprintf( self.fid, '%s\n', str);
  end
end

% close file
% ----------
fclose(self.fid);

% display time to read file on console
% -------------------------------------
if self.Echo
  t = toc; fprintf('...done (%.2f sec).\n',t);
  fprintf('\n');
end

end

