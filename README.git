Quick guide to setup git with datagui package on GitHUB

  Install git under Windows or Linux:
  http://git-scm.com/download

  Install Tortoise Git:
  https://code.google.com/p/tortoisegit/

  Initialize git:
    $ git config --global user.name "username"
    $ git config --global user.name "your_email@example.com
    $ git config --global color.diff auto
    $ git config --global color.status auto
    $ git config --global color.branch auto
    $ git config --global core.autocrlf input
    $ vi ~/.gitconfig
  add:
    [alias]
        ci = commit
        co = checkout
        st = status
        br = branch
  
  Initialize local repository with one test file:
  touch <file>
  git init
  git add <file>
  git commit -m "first commit"

  Setup ssh keys:
  $ ssh-keygen -t rsa
  or 
  $ ssh-keygen -t rsa -C "your_email@example.com"
  to create yours ssh keys and paraphrase

  go to ~/.ssh local directory and copy your public key from id_rsa.pub file
  to your github admin page: https://github.com/<user>, click on the
  "Account settings" icon, select SSH keys in left tab and add your public key.

  Go to the "Repositories" tab and create a new one.

  In rigth panel, select the protocol SSH and click the button to copy
  the URL,
  ssh: git@github.com:jgrelet/datagui.git
   
  see doc: https://help.github.com/articles/which-remote-url-should-i-use

  Test ssh connection :
  $ ssh -vT git@github.com

  help for ssh: http://help.github.com/ssh-issues/

  Push your local copy to GitHUB:
  $ git remote add origin git@github.com:<user>/datagui.git
  $ git push -u origin master

  If you want use TortoiseGit under Windows to push, you must configure Git
  (left panel) 
   - Git/Remote and set up "origin" and  "URL" and "Push URL" tabs
     with "git@github.com:jgrelet/datagui.git"
   - Network: SSH client with: "C:\Program Files (x86)\Git\bin\ssh.exe"
     instead of plink.
  
  If you want use cygwin, don't forget to use the same public and private keys
  from Git bash and Git cygwin .ssh directories.

  Working:
  
  Listing branch:
  $ git branch 

  the * character that prefixes the  branch indicates the branch that 
  you currently have checked out

  To see the last commit on each branch:
  $ git branch -v

  Create branch 'test' and work inside:
  $ git branch test
  $ git checkout test
  or shorthand :
  $ git checkout -b test

  Switched to branch 'master':
  $ git checkout master

  Switched to branch 'test':
  $ git checkout test

  Merging:
  $ git checkout master
  $ git merge test

  If conflict:
  $ git status
 
  Listing your Tags:
  $ git tag

  Creating Tags:
  $ git tag -a v1.0 -m 'my version 1.0'
  
  See tag data
  $ git show v1.0

  Verifying Tags:
  $ git tag -v v1.0

  Matlab:
  add git.m to your pathdef.m
  see: https://github.com/manur/MATLAB-git
